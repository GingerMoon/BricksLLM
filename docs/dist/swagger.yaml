openapi: 3.1.0
info:
  title: BricksLLM
  contact:
    email: spike@bricks-tech.com
  license:
    name: The MIT License
    url: https://opensource.org/license/mit
  version: 1.28.3

tags:
  - name: Health Check
  - name: Keys
  - name: Provider Settings
  - name: Users
  - name: Events
  - name: Reporting
  - name: Custom Providers
  - name: Policies
  - name: Routes

servers:
  - url: localhost:8001
    description: Admin server for configuring BricksLLM
    variables:
      protocol:
        enum: [http]
        default: http
paths:
  /api/health:
    get:
      tags:
        - Health Check
      summary: Health check
      description: Endpoint for checking the health status of the service.
      responses:
        200:
          description: Service is up and running.
  /api/key-management/keys:
    get:
      tags:
        - Keys
      summary: List keys
      description: This endpoints if for listing keys using query parameters.
      parameters:
        - name: tag
          in: query
          description: Identifier attached to a key configuration.
          required: false
          type: string
        - name: tags
          in: query
          description: List of tags.
          required: false
          type: array
          items:
            type: string
        - name: provider
          in: query
          description: Provider attached to a key provider configuration.
          required: false
          type: string
          enum: [openai, azure, vllm, deepinfra, anthropic]
        - name: keyIds
          in: query
          description: List of key IDs.
          required: false
          type: array
          items:
            type: string
      responses:
        200:
          description: List of keys.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Key"
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"
    put:
      tags:
        - Keys
      summary: Create a new key
      description: This endpoint is for creating a new key.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateKeyRequest"

      responses:
        200:
          description: Successfully created key.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Key"
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"
    patch:
      tags:
        - Keys
      summary: Update key
      description: This endpoint is for updating a key using a key ID.
      parameters:
        - in: path
          name: keyId
          type: string
          required: true
          description: Unique key configuration identifier.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateKeyRequest"
      responses:
        200:
          description: Successfully updated key configuration.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Key"

  /api/v2/key-management/keys:
    post:
      tags:
        - Keys
      summary: List keys V2
      description: This endpoint is V2 for listing keys.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetKeysV2Request"

      responses:
        200:
          description: Successful retrieval of keys.
          content:
            application/json:
              schema:
                type: object
                properties:
                  keys:
                    type: array
                    items:
                      $ref: "#/components/schemas/Key"
                  count:
                    type: integer
                    example: 123
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"

  /api/reporting/top-keys:
    post:
      tags:
        - Reporting
      summary: List top spending keys
      description: This endpoint is for listing top spending keys ordered by spend.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetTopKeysRequest"

      responses:
        200:
          description: Successfully updated key configuration.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyReportingResponse"

        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"

  /api/provider-settings:
    post:
      tags:
        - Provider Settings
      summary: Create a provider setting
      description: This endpoint is creating a provider setting.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProviderSettingCreationRequest"
      responses:
        200:
          description: Successfully created a provider setting.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProviderSetting"

        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
    get:
      tags:
        - Provider Settings
      summary: List provider settings
      description: This endpoints is for listing provider settings.
      parameters:
        - in: query
          name: ids
          type: array
          items:
            type: string
          description: Provider setting IDs
      responses:
        200:
          description: Array of provider settings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProviderSetting"

  /api/provider-settings/{id}:
    patch:
      tags:
        - Provider Settings
      summary: Update a provider setting
      description: This endpoint is for updating a provider setting.
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: Unique identifier for the provider setting to update.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProviderSettingUpdateRequest"
      responses:
        200:
          description: Provider setting updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProviderSetting"
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"

  /api/reporting/events:
    post:
      tags:
        - Reporting
      summary: Retrieve Metrics
      description: This endpoint retrieves aggregated metrics.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportingEventsRequest"
      responses:
        200:
          description: Aggregated metrics data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportingEventsResponse"

        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"

  /api/events:
    get:
      tags:
        - Events
      summary: Get events
      description: This endpoint retrieves events based on query parameters.
      parameters:
        - in: query
          name: customId
          type: string
          description: Custom identifier attached to an event.
        - in: query
          name: keyIds
          type: array
          items:
            type: string
          description: List of key IDs.
        - in: query
          name: start
          type: integer
          description: Start timestamp, required if `keyIds` is specified.
        - in: query
          name: end
          type: integer
          description: End timestamp, required if `keyIds` is specified.
      responses:
        200:
          description: Array of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"

  /api/v2/events:
    get:
      tags:
        - Events
      summary: Get events V2
      description: List events based on provided filters.
      parameters:
        - in: query
          name: userIds
          type: array
          items:
            type: string
          description: List of user IDs to filter events by specific users.
        - in: query
          name: customIds
          type: array
          items:
            type: string
          description: List of custom identifiers for filtering events.
        - in: query
          name: keyIds
          type: array
          items:
            type: string
          description: List of key IDs used to filter events.
        - in: query
          name: tags
          type: array
          items:
            type: string
          description: List of tags associated with events for filtering.
        - in: query
          name: start
          type: integer
          required: true
          description: Start timestamp for filtering events.
        - in: query
          name: end
          type: integer
          required: true
          description: End timestamp for filtering events.
        - in: query
          name: limit
          type: integer
          description: Maximum number of events to return.
        - in: query
          name: offset
          type: integer
          description: Offset for pagination.
        - in: query
          name: policyIds
          type: array
          items:
            type: string
          description: List of policy IDs to filter events related to specific policies.
        - in: query
          name: actions
          type: array
          items:
            type: string
          description: Values can include `allowed`, `redacted`, and `blocked`.
        - in: query
          name: costOrder
          type: string
          description: Order by cost, specify `asc` or `desc`.
        - in: query
          name: dateOrder
          type: string
          description: Order by date, specify `asc` or `desc`.
        - in: query
          name: returnCount
          type: boolean
          description: Whether to return the count of events instead of event details.
        - in: query
          name: status
          type: integer
          description: Event HTTP status code.
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      $ref: "#/components/schemas/Event"
                  count:
                    type: integer
                    description: Total number of events returned.
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"

        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"

  /api/custom/providers:
    get:
      tags:
        - Custom Providers
      summary: Get custom providers
      description: List custom providers based on the provided filters.
      responses:
        200:
          description: List of custom providers.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Provider"
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"
    post:
      tags:
        - Custom Providers
      summary: Create a custom provider
      description: Create a custom provider.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Provider"
      responses:
        200:
          description: Created custom provider.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Provider"
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"
    patch:
      tags:
        - Custom Providers
      summary: Update a custom provider
      description: Update a custom provider.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Provider"
      responses:
        200:
          description: Updated custom provider.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Provider"
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"

  /api/routes:
    post:
      tags:
        - Routes
      summary: Create routes
      description: Creates a new route based on the provided configurations.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRouteRequest"
      responses:
        200:
          description: Route created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RouteConfig"
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"
    get:
      tags:
        - Routes
      summary: Retrieve routes
      description: Retrieves all routes.
      responses:
        200:
          description: List of all routes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RouteConfig"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"

  /api/routes/{id}:
    get:
      tags:
        - Routes
      summary: Retrieve a route
      description: Retrieves a route based on its unique identifier.
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: Unique identifier for the route.
      responses:
        200:
          description: Route retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RouteConfig"
        404:
          description: Route not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"

  /api/reporting/users-ids:
    get:
      tags:
        - Reporting
      summary: Get user IDs
      description: Retrieves user IDs associated with a given key ID.
      parameters:
        - in: query
          name: keyId
          type: string
          required: true
          description: Key ID for which to retrieve user IDs.
      responses:
        200:
          description: List of user IDs.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"

  /api/reporting/custom-ids:
    get:
      tags:
        - Reporting
      summary: Get custom IDs
      description: Retrieves custom IDs associated with a given key ID.
      parameters:
        - in: query
          name: keyId
          type: string
          required: true
          description: Key ID for which to retrieve custom IDs.
      responses:
        200:
          description: List of custom IDs.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"

  /api/users:
    post:
      tags:
        - Users
      summary: Create a user
      description: Creates a new user with specific configurations.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreationRequest"
      responses:
        200:
          description: Created user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"

    patch:
      tags:
        - Users
      summary: Update a user via user id and tags
      description: Update a user based on the provided query params.
      parameters:
        - in: query
          name: userId
          type: string
          required: true
          description: Client defined user id to update.
        - in: query
          name: tags
          type: array
          items:
            type: string
          description: Array of identifiers associated with the user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"

      responses:
        200:
          description: Updated User.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"

    get:
      tags:
        - Users
      summary: Get users
      description: Retrieves users based on query parameters.
      parameters:
        - in: query
          name: userIds
          type: array
          items:
            type: string
          description: Array of client defined user identifiers.
        - in: query
          name: tags
          type: array
          items:
            type: string
          description: Array of identifiers associated with a user.
        - in: query
          name: offset
          type: integer
          description: Pagination offset.
        - in: query
          name: limit
          type: integer
          description: Pagination limit.
        - in: query
          name: keyIds
          type: array
          items:
            type: string
          description: Array of key IDs associated with a user.
      responses:
        200:
          description: List of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"

  /policies:
    post:
      tags:
        - Policies
      summary: Create a policy
      description: Creates a new privacy policy with specific rules and configurations.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PolicyRequest"
      responses:
        200:
          description: Policy created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"
    get:
      tags:
        - Policies
      summary: Get policies by tags
      description: Retrieves policies filtered by tags.
      parameters:
        - in: query
          name: tags
          type: array
          items:
            type: string
          required: true
          description: Tags attached to the policies.
      responses:
        200:
          description: List of policies.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Policy"
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"

  /policies/{id}:
    patch:
      tags:
        - Policies
      summary: Update a policy
      description: Updates a specific policy by its ID.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PolicyRequest"
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: Unique identifier of the policy to update.

      responses:
        200:
          description: Policy updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"

  /api/users/{id}:
    patch:
      tags:
        - Users
      summary: Update a user via id
      description: Updates user details based on the provided id.
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: Unique identifier of the user to update.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"

      responses:
        200:
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"

components:
  schemas:
    UpdateKeyRequest:
      type: object
      properties:
        name:
          type: string
          example: spike's developer key
          description: Name of the API key.
        revoked:
          type: boolean
          example: false
          description: Indicator for whether the key is revoked.
        revokedReason:
          type: string
          example: The key has expired
          description: Reason for why the key is revoked.
        tags:
          type: array
          items:
            type: string
          example: ["org-tag-12345"]
          description: Identifiers associated with the key.
        costLimitInUsd:
          type: number
          example: 5.5
          description: Total spend limit of the API key.
        costLimitInUsdUnit:
          type: string
          enum: [m, h, d, mo]
          description: Time unit for costLimitInUsdOverTime. Possible values are ['m', 'h', 'd', 'mo'].
        costLimitInUsdOverTime:
          type: number
          example: 5.5
          description: Total spend within period of time. This field is required if costLimitInUsdUnit is specified.
        rateLimitOverTime:
          type: integer
          example: 5
          description: Rate limit over period of time. This field is required if rateLimitUnit is specified.
        rateLimitUnit:
          type: string
          enum: [h, m, s, d]
          description: Time unit for rateLimitOverTime. Possible values are ['h', 'm', 's', 'd'].
        ttl:
          type: string
          description: Time to live for the API key.
        allowedPaths:
          type: array
          items:
            $ref: "#/components/schemas/PathConfig"
          description: List of paths that can be accessed by the API key.
        settingId:
          type: string
          deprecated: true
          description: Use `settingIds` field instead.
        settingIds:
          type: array
          items:
            type: string
          description: Setting ids associated with the key.
        shouldLogRequest:
          type: boolean
          description: Should request be stored.
        shouldLogResponse:
          type: boolean
          description: Should response be stored.
        rotationEnabled:
          type: boolean
          description: Should key rotate setting used to access third party endpoints in order to circumvent rate limits.
        policyId:
          type: string
          description: Policy id associated with the key.
        isKeyNotHashed:
          type: boolean
          description: Flag controls whether or not the key should be hashed.

    CreateKeyRequest:
      type: object
      required:
        - settingIds
        - key
      properties:
        name:
          type: string
          example: spike's developer key
          description: Name of the API key.
        tags:
          type: array
          items:
            type: string
          example: ["org-tag-12345"]
          description: Identifiers associated with the API key for categorization or organization.
        key:
          type: string
          description: API key.
          example: abcdef12345
        costLimitInUsd:
          type: number
          example: 5.5
          description: The total spending limit for the API key in USD.
        costLimitInUsdOverTime:
          type: number
          example: 2
          description: Specifies the spending limit over a specified time frame.
        costLimitInUsdUnit:
          type: string
          enum: [m, h, d, mo]
          example: d
          description: Unit of time for the cost limit; 'm' for minutes, 'h' for hours, 'd' for days, 'mo' for months.
        rateLimitOverTime:
          type: integer
          example: 2
          description: Specifies the maximum number of requests that can be made over a specified time period.
        rateLimitUnit:
          type: string
          enum: [h, m, s, d]
          example: m
          description: Unit of time for the rate limit; 'h' for hours, 'm' for minutes, 's' for seconds, 'd' for days.
        ttl:
          type: string
          example: "24h"
          description: Time to live for the API key, indicating how long the key remains valid.
        allowedPaths:
          type: array
          items:
            $ref: "#/components/schemas/PathConfig"
          description: Specifies the API paths that are accessible using this key.
        settingId:
          type: string
          required: true
          deprecated: true
          description: Use 'settingIds' instead for identifying associated settings.
        settingIds:
          type: array
          required: true
          items:
            type: string
          example: ["98daa3ae-961d-4253-bf6a-322a32fdca3d"]
          description: Array of setting identifiers associated with the key.
        shouldLogRequest:
          type: boolean
          example: false
          description: Indicates whether requests made with this key should be logged.
        shouldLogResponse:
          type: boolean
          example: true
          description: Indicates whether responses for requests made with this key should be logged.
        rotationEnabled:
          type: boolean
          example: false
          description: Indicates whether key rotation is enabled to use different keys periodically for enhanced security.
        policyId:
          type: string
          example: "98daa3ae-961d-4253-bf6a-322a32fdca3d"
          description: Identifier of the policy associated with this key.
        isKeyNotHashed:
          type: boolean
          example: false
          description: Flag controls whether or not the key should be hashed.

    Key:
      type: object
      properties:
        name:
          type: string
          example: spike's developer key
          description: Name of the API key.
        createdAt:
          type: integer
          example: 1257894000
          description: Key configuration creation time in unix timestamp.
        updatedAt:
          type: integer
          example: 1257894000
          description: Key configuration update time in unix timestamp.
        revoked:
          type: boolean
          example: true
          description: Indicator for whether the key is revoked.
        revokedReason:
          type: string
          example: The key has expired
          description: Reason for why the key is revoked.
        tags:
          type: array
          items:
            type: string
          example: ["org-tag-12345"]
          description: Identifiers associated with the key.
        keyId:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000
          description: Unique identifier for the key.
        costLimitInUsd:
          type: number
          example: 5.5
          description: Total spend limit of the API key in USD.
        costLimitInUsdOverTime:
          type: number
          example: 2
          description: Total spend within a specified period of time. This field is required if costLimitInUsdUnit is specified.
        costLimitInUsdUnit:
          type: string
          enum: [m, h, d, mo]
          example: d
          description: Time unit for costLimitInUsdOverTime. Possible values are ['m', 'h', 'd', 'mo'].
        rateLimitOverTime:
          type: integer
          example: 2
          description: Rate limit over a specified period of time. This field is required if rateLimitUnit is specified.
        rateLimitUnit:
          type: string
          enum: [h, m, s, d]
          example: m
          description: Time unit for rateLimitOverTime. Possible values are ['h', 'm', 's', 'd'].
        ttl:
          type: string
          example: "2d"
          description: Time to live for the API key, indicating how long the key remains valid. Available units are ['s', 'm', 'h'].
        allowedPaths:
          type: array
          items:
            $ref: "#/components/schemas/PathConfig"
          description: List of paths that can be accessed using this key.
        settingId:
          type: string
          deprecated: true
          example: 98daa3ae-961d-4253-bf6a-322a32fdca3d
          description: This field is DEPRECATED. Use 'settingIds' field instead.
        settingIds:
          type: array
          items:
            type: string
          example: ["98daa3ae-961d-4253-bf6a-322a32fdca3d"]
          description: Array of setting identifiers associated with the key.
        shouldLogRequest:
          type: boolean
          example: false
          description: Indicates whether requests made with this key should be logged.
        shouldLogResponse:
          type: boolean
          example: true
          description: Indicates whether responses for requests made with this key should be logged.
        rotationEnabled:
          type: boolean
          example: false
          description: Indicates whether key rotation is enabled to access third-party endpoints to circumvent rate limits.
        policyId:
          type: string
          example: 98daa3ae-961d-4253-bf6a-322a32fdca3d
          description: Policy id associated with the key.
        isKeyNotHashed:
          type: boolean
          example: false
          description: Indicates whether or not the key is hashed.

    PathConfig:
      type: object
      required:
        - path
        - method
      properties:
        path:
          type: string
          example: /api/providers/openai/v1/chat/completion
          description: Allowed path for the API key.
        method:
          type: string
          enum: [GET, POST, PUT, DELETE]
          description: HTTP Method allowed for the path.

    KeyReportingResponse:
      type: object
      properties:
        dataPoints:
          type: array
          items:
            $ref: "#/components/schemas/KeyDataPoint"
    KeyDataPoint:
      type: object
      properties:
        keyId:
          type: string
        costInUsd:
          type: float

    InternalError:
      type: object
      properties:
        status:
          type: integer
          example: 500
        title:
          type: string
          example: request body reader error
        type:
          type: string
          example: /errors/request-body-read
        detail:
          type: string
          example: something is wrong
        instance:
          type: string
          example: /api/key-management/keys

    BadRequestError:
      type: object
      properties:
        status:
          type: integer
          example: 400
        title:
          type: string
          example: request is missing `name` filed
        type:
          type: string
          example: /errors/missing-request-paramss
        detail:
          type: string
          example: something is wrong
        instance:
          type: string
          example: /api/key-management/keys

    ProviderSettingUpdateRequest:
      type: object
      properties:
        setting:
          $ref: "#/components/schemas/ProviderSettingMap"
        name:
          type: string
          example: YOUR_PROVIDER_SETTING_NAME
          description: Name assigned to the provider setting.
        allowedModels:
          type: array
          items:
            type: string
          example: ["text-embedding-ada-002"]
          description: Models allowed for use with this provider setting.
        costMap:
          $ref: "#/components/schemas/CostMap"

    ProviderSettingCreationRequest:
      required:
          - setting
          - provider
      type: object
      properties:
        setting:
          $ref: "#/components/schemas/ProviderSettingMap"
        provider:
          type: string
          enum: [openai, anthropic, azure, vllm, deepinfra]
        name:
          type: string
          example: YOUR_PROVIDER_SETTING_NAME
          description: Name assigned to the provider setting.
        allowedModels:
          type: array
          items:
            type: string
          example: ["text-embedding-ada-002"]
          description: Models allowed for use with this provider setting.
        costMap:
          $ref: "#/components/schemas/CostMap"

    ProviderSetting:
      type: object
      properties:
        id:
          type: string
          example: 98daa3ae-961d-4253-bf6a-322a32fdca3d
          description: Unique identifier associated with the provider.
        created_at:
          type: integer
          example: 1699933571
          description: Unix timestamp for creation time.
        updated_at:
          type: integer
          example: 1699933571
          description: Unix timestamp for update time.
        setting:
          $ref: "#/components/schemas/ProviderSettingMap"
        provider:
          type: string
          example: openai
          description: This value can only be 'openai' as for now.
        name:
          type: string
          example: YOUR_PROVIDER_SETTING_NAME
          description: Name assigned to the provider setting.
        allowedModels:
          type: array
          items:
            type: string
          example: ["text-embedding-ada-002"]
          description: Models allowed for use with this provider setting.
        costMap:
          $ref: "#/components/schemas/CostMap"

    CostMap:
      type: object
      description: Customized cost mapping for different models.
      example: { "promptCostPerModel": { "facebook/opt-125m": 0.0003 }}
      properties:
        promptCostPerModel:
          type: object
          additionalProperties:
            type: number
          example: { "facebook/opt-125m": 0.0003 }
          description: Customized prompt cost value per 1000 tokens.
        completionCostPerModel:
          type: object
          additionalProperties:
            type: number
          example: { "facebook/opt-125m": 0.0003 }
          description: Customized completion cost per 1000 tokens.
        embeddingsCostPerModel:
          type: object
          additionalProperties:
            type: number
          example: { "facebook/opt-125m": 0.0003 }
          description: Customized embeddings cost per 1000 tokens.

    ProviderSettingMap:
      type: object
      description: API Credentials associated with different providers.
      example: { "apikey": "MY_OPENAI_API_KEY"}
      required:
        - apikey
      properties:
        apikey:
          type: string
          example: MY_OPENAI_API_KEY
          description: My API key associated.
        url:
          type: string
          example: https://short-terms-smile.loca.lt
          description: Required for vLLM integrations.
        resourceName:
          type: string
          example: MY_AZURE_OPENAI_RESOURCE_NAME
          description: Required for Azure OpenAI integrations.

    ReportingEventsRequest:
      type: object
      required:
        - keyIds
        - tags
        - customIds
        - filters
        - start
        - end
        - increment
      properties:
        keyIds:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        customIds:
          type: array
          items:
            type: string
        filters:
          type: array
          items:
            type: string
        start:
          type: integer
        end:
          type: integer
        increment:
          type: integer

    ReportingEventsResponse:
      type: object
      properties:
        dataPoints:
          type: array
          items:
            $ref: "#/components/schemas/DataPoint"
        latencyInMsMedian:
          type: float
        latencyInMs99th:
          type: float

    DataPoint:
      type: object
      properties:
        timeStamp:
          type: integer
        numberOfRequests:
          type: integer
        costInUsd:
          type: float
        latencyInMs:
          type: integer
        promptTokenCount:
          type: integer
        completionTokenCount:
          type: integer
        successCount:
          type: integer
        keyId:
          type: integer
        model:
          type: string
        customId:
          type: string

    Event:
      type: object
      properties:
        id:
          type: string
          example: 98daa3ae-961d-4253-bf6a-322a32fdca3d
          description: Unique identifier associated with the event.
        created_at:
          type: integer
          example: 1699933571
          description: Unix timestamp for creation time.
        tags:
          type: array
          items:
            type: string
          example: ["YOUR_TAG"]
          description: Tags associated with the event key.
        key_id:
          type: string
          example: 98daa3ae-961d-4253-bf6a-322a32fdca3d
          description: Key ID associated with the proxy request.
        cost_in_usd:
          type: float
          example: 0.0004
          description: Cost incurred by the proxy request.
        model:
          type: string
          example: gpt-4-1105-preview
          description: Model used in the proxy request.
        provider:
          type: string
          enum: [openai, anthropic, azure, vllm, deepinfra]
          example: openai
          description: Provider for the proxy request.
        status:
          type: integer
          example: 200
          description: HTTP status code of the event.
        prompt_token_count:
          type: integer
          example: 8
          description: Prompt token count of the proxy request.
        completion_token_count:
          type: integer
          example: 16
          description: Completion token counts of the proxy request.
        latency_in_ms:
          type: integer
          example: 160
          description: Latency in milliseconds for the proxy request.
        path:
          type: string
          example: /api/v1/chat/completion
          description: API path accessed in the proxy request.
        method:
          type: string
          example: POST
          description: HTTP method used for the proxy request.
        custom_id:
          type: string
          example: YOUR_CUSTOM_ID
          description: Custom ID passed by the user in the headers of proxy requests.
        request:
          type: string
          example: "{}"
          description: Request content in bytes sent to providers.
        response:
          type: string
          example: "{}"
          description: Response content in bytes received from providers.
        userId:
          type: string
          example: test@gg.com
          description: Client defined user id associated with the event.
        action:
          type: string
          example: allowed
          description: Action taken as a result of policy.
          enum: [allowed, warned, redacted, blocked]
        policyId:
          type: string
          example: 98daa3ae-961d-4253-bf6a-322a32fdca3d
          description: Associated policy ID.
        routeId:
          type: string
          example: 98daa3ae-961d-4253-bf6a-322a32fdca3d
          description: Associated route ID.        
        correlationId:
          type: string
          example: 98daa3ae-961d-4253-bf6a-322a32fdca3d
          description: Associated correlation ID.
          
    Provider:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier associated with the provider.
        created_at:
          type: integer
          description: Unix timestamp for creation time.
        updated_at:
          type: integer
          description: Unix timestamp for update time.
        provider:
          type: string
          description: Unique identifier associated with the route config.
        route_configs:
          type: array
          items:
            $ref: "#/components/schemas/RouteConfig"
          description: Route configurations for the custom provider.
        authentication_param:
          type: string
          description: The authentication parameter required for.

    RouteConfig:
      type: object
      properties:
        path:
          type: string
          description: Path associated with the custom provider route. It must be unique within the custom provider.
        target_url:
          type: string
          description: Proxy destination URL for the custom provider route.
        model_location:
          type: string
          description: JSON field for the model in the HTTP request.
        request_prompt_location:
          type: string
          description: JSON field for the prompt request in the HTTP request.
        response_completion_location:
          type: string
          description: JSON field for the completion content in the HTTP response.
        stream_location:
          type: string
          description: JSON field for the stream boolean in the HTTP request.
        stream_end_word:
          type: string
          description: End word for the stream.
        stream_response_completion_location:
          type: string
          description: JSON field for the completion content in the streaming response.
        stream_max_empty_messages:
          type: integer
          description: Number of max empty messages in stream.

    CreateRouteRequest:
      type: object
      required:
        - name
        - path
        - steps
        - keyIds
        - cacheConfig
      properties:
        name:
          type: string
          description: Name of the route.
        path:
          type: string
          description: Path identifier for the route.
        steps:
          type: array
          items:
            $ref: "#/components/schemas/StepConfig"
        keyIds:
          type: array
          items:
            type: string
          description: List of key IDs authorized to use the route.
        cacheConfig:
          $ref: "#/components/schemas/CacheConfig"

    StepConfig:
      type: object
      required:
        - provider
        - model
      properties:
        provider:
          type: string
          enum: [openai, anthropic, azure, vllm, deepinfra]
          description: Provider for the step.
        model:
          type: string
          description: Model that the step should call.
        retries:
          type: integer
          default: 0
          description: Number of retries allowed.
        params:
          type: object
          description: Additional parameters required for the API requests.
        timeout:
          type: string
          default: "5m"
          description: Timeout for each request.

    CacheConfig:
      type: object
      required:
        - enabled
      properties:
        enabled:
          type: boolean
          description: Indicates whether caching is enabled.
        ttl:
          type: string
          default: "168h"
          description: Time to live for the cache entries.

    User:
      type: object
      properties:
        id:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000
          description: Unique identifier for the user.
        name:
          type: string
          example: spike
          description: Name of the user.
        createdAt:
          type: integer
          example: 1257894000
          description: Unix timestamp of the user creation.
        updatedAt:
          type: integer
          example: 1257894000
          description: Unix timestamp of the last user update.
        tags:
          type: array
          items:
            type: string
          example: ["org-tag-12345"]
          description: Identifiers associated with the user.
        keyIds:
          type: array
          items:
            type: string
          example: ["550e8400-e29b-41d4-a716-446655440000"]
          description: Key IDs associated with the user.
        revoked:
          type: boolean
          example: true
          description: Whether the user is revoked.
        revokedReason:
          type: string
          example: expired
          description: Reason for user revocation.
        costLimitInUsd:
          type: number
          example: 5.5
          description: Total spend limit of the user.
        costLimitInUsdOverTime:
          type: number
          example: 2
          description: Total spend within a specified period. Required if `costLimitInUsdUnit` is specified.
        costLimitInUsdUnit:
          type: string
          example: d
          enum: [m, h, d, mo]
          description: Time unit for `costLimitInUsdOverTime`. Possible values are `m`, `h`, `d`, `mo`.
        rateLimitOverTime:
          type: integer
          example: 2
          description: Rate limit over a specified time period. Required if `rateLimitUnit` is specified.
        rateLimitUnit:
          type: string
          example: m
          enum: [h, m, s, d]
          description: Time unit for rate limit. Possible values are `h`, `m`, `s`, `d`.
        ttl:
          type: string
          example: 24h
          description: Time to live for the user configuration. Available units are `s`, `m`, `h`.
        allowedPaths:
          type: array
          items:
            $ref: "#/components/schemas/PathConfig"
          description: List of API paths that the user is allowed to access.
        allowedModels:
          type: array
          items:
            type: string
          example: ["gpt-4"]
          description: Models that the user can access.
        userId:
          type: string
          example: 98daa3ae-961d-4253-bf6a-322a32fdca3d
          description: Client defined user ID.

    UserCreationRequest:
      type: object
      properties:
        name:
          type: string
          example: spike
          description: Name of the user.
        tags:
          type: array
          items:
            type: string
          example: ["org-tag-12345"]
          description: Identifiers associated with the user.
        keyIds:
          type: array
          items:
            type: string
          example: ["550e8400-e29b-41d4-a716-446655440000"]
          description: Key IDs associated with the user.
        revoked:
          type: boolean
          example: true
          description: Whether the user is revoked.
        revokedReason:
          type: string
          example: expired
          description: Reason for user revocation.
        costLimitInUsd:
          type: number
          example: 5.5
          description: Total spend limit of the user.
        costLimitInUsdOverTime:
          type: number
          example: 2
          description: Total spend within a specified period. Required if `costLimitInUsdUnit` is specified.
        costLimitInUsdUnit:
          type: string
          example: d
          enum: [m, h, d, mo]
          description: Time unit for `costLimitInUsdOverTime`. Possible values are `m`, `h`, `d`, `mo`.
        rateLimitOverTime:
          type: integer
          example: 2
          description: Rate limit over a specified time period. Required if `rateLimitUnit` is specified.
        rateLimitUnit:
          type: string
          example: m
          enum: [h, m, s, d]
          description: Time unit for rate limit. Possible values are `h`, `m`, `s`, `d`.
        ttl:
          type: string
          example: 24h
          description: Time to live for the user configuration. Available units are `s`, `m`, `h`.
        allowedPaths:
          type: array
          items:
            $ref: "#/components/schemas/PathConfig"
          description: List of API paths that the user is allowed to access.
        allowedModels:
          type: array
          items:
            type: string
          example: ["gpt-4"]
          description: Models that the user can access.
        userId:
          type: string
          example: 98daa3ae-961d-4253-bf6a-322a32fdca3d
          description: Client defined user ID.

    UserUpdateRequest:
      type: object
      properties:
        name:
          type: string
          example: spike
          description: Name of the user.
        keyIds:
          type: array
          items:
            type: string
          example: ["550e8400-e29b-41d4-a716-446655440000"]
          description: Key IDs associated with the user.
        revoked:
          type: boolean
          example: true
          description: Whether the user is revoked.
        revokedReason:
          type: string
          example: expired
          description: Reason for user revocation.
        costLimitInUsd:
          type: number
          example: 5.5
          description: Total spend limit of the user.
        costLimitInUsdOverTime:
          type: number
          example: 2
          description: Total spend within a specified period. Required if `costLimitInUsdUnit` is specified.
        costLimitInUsdUnit:
          type: string
          example: d
          enum: [m, h, d, mo]
          description: Time unit for `costLimitInUsdOverTime`. Possible values are `m`, `h`, `d`, `mo`.
        rateLimitOverTime:
          type: integer
          example: 2
          description: Rate limit over a specified time period. Required if `rateLimitUnit` is specified.
        rateLimitUnit:
          type: string
          example: m
          enum: [h, m, s, d]
          description: Time unit for rate limit. Possible values are `h`, `m`, `s`, `d`.
        ttl:
          type: string
          example: 24h
          description: Time to live for the user configuration. Available units are `s`, `m`, `h`.
        allowedPaths:
          type: array
          items:
            $ref: "#/components/schemas/PathConfig"
          description: List of API paths that the user is allowed to access.
        allowedModels:
          type: array
          items:
            type: string
          example: ["gpt-4"]
          description: Models that the user can access.

    GetKeysV2Request:
      type: object
      properties:
        keyIds:
          type: array
          items:
            type: string
          example: ["98daa3ae-961d-4253-bf6a-322a32fdca3d"]
        tags:
          type: array
          items:
            type: string
          example: ["org-tag-12345"]
        name:
          type: string
          example: "key"
        revoked:
          type: boolean
          example: false
        limit:
          type: integer
          example: 5
        offset:
          type: integer
          example: 5
        order:
          type: string
          enum: [asc, desc]
          example: "asc"
        returnCount:
          type: boolean
          example: true

    GetTopKeysRequest:
      type: object
      properties:
        start:
          type: integer
          example: 1257894000
          description: Start unix timestamp.
        end:
          type: integer
          example: 1257894000
          description: End unix timestamp.
        keyIds:
          type: array
          items:
            type: string
          example: ["98daa3ae-961d-4253-bf6a-322a32fdca3d"]
          description: Array of key IDs.
        tags:
          type: array
          items:
            type: string
          example: ["org-tag-12345"]
          description: Identifiers associated with keys.
        name:
          type: string
          example: key
          description: Filter keys by the substring match on the `name` field.
        revoked:
          type: boolean
          example: false
          description: Filters keys by `revoked` status.
        limit:
          type: integer
          example: 5
          description: Pagination limit.
        offset:
          type: integer
          example: 5
          description: Pagination offset.
        order:
          type: string
          example: asc
          enum: [asc, desc]

    PolicyRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the policy.
        tags:
          type: array
          items:
            type: string
          description: Tags associated with the policy.
        config:
          $ref: "#/components/schemas/Config"
        regexConfig:
          $ref: "#/components/schemas/RegexConfig"

    Config:
      type: object
      properties:
        rules:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Action"
          description: Map of rules with associated actions for PII detection.

    RegexConfig:
      type: object
      properties:
        rules:
          type: array
          items:
            $ref: "#/components/schemas/RegexRule"
          description: List of regular expression rules with associated actions.

    RegexRule:
      type: object
      properties:
        definition:
          type: string
          description: Regular expression pattern.
        action:
          $ref: "#/components/schemas/Action"

    Action:
      type: string
      enum: [block, allow_but_redact, allow]
      description: Actions that can be applied to a rule match.

    Policy:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the policy.
        created_at:
          type: integer
          description: Timestamp of when the policy was created.
        updated_at:
          type: integer
          description: Timestamp of the last update to the policy.
        tags:
          type: array
          items:
            type: string
          description: Tags attached to the policy.
        config:
          $ref: "#/components/schemas/Config"
        regexConfig:
          $ref: "#/components/schemas/RegexConfig"
